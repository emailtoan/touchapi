package flash.events{	import flash.display.Sprite;		import flash.display.Shape;	import flash.events.*;	import flash.ui.Mouse;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.filters.DropShadowFilter;		public class CursorEvent extends Sprite {		public static  const MOUSE_SHOW:String="mouseshow";//set up for custom event dispatch		public static  const MOUSE_HIDE:String="mousehide";//set up for custom event dispatch		private var loader:Loader;		private var cursor:Shape				public function CursorEvent() {			addEventListener(Event.ADDED_TO_STAGE,addToStageHandler);			addEventListener(Event.REMOVED_FROM_STAGE,removedFromStageListener);		}				private function addToStageHandler(event:Event):void {			drawCursor();		}				private function drawCursor():void {					cursor = new Shape();			cursor.graphics.beginFill(0xFFFFFF, 1.0);			cursor.graphics.drawCircle(0, 0, 14);			cursor.alpha = 0.5;							var n_shadow : DropShadowFilter = new DropShadowFilter(5,90,0,0.5,30,30,2,1);			cursor.filters=[n_shadow];					stage.addChild(cursor);				stage.addEventListener(MouseEvent.MOUSE_MOVE, shadowMouse);			stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);			stage.addEventListener(MouseEvent.MOUSE_UP,mouseUp);			stage.addEventListener(CursorEvent.MOUSE_SHOW,showMouse);			stage.addEventListener(CursorEvent.MOUSE_HIDE,hideMouse);			stage.addEventListener(Event.MOUSE_LEAVE,mouseLeaveListener);			cursor.visible=false;		}			public function showMouse(event:Event):void {			cursor.visible=false;			Mouse.show();		}				public function hideMouse(event:Event):void {			cursor.visible = true;			Mouse.hide();		}				private function shadowMouse(event:MouseEvent):void {			cursor.x=event.stageX;			cursor.y = event.stageY;						}		private function mouseLeaveListener(e:Event):void {			cursor.visible = false;			}				private function mouseDown(e:Event):void {			cursor.alpha = 0.75;		}		private function mouseUp(e:Event):void {			cursor.alpha = 0.5;		}		private function removedFromStageListener(event:Event):void {			Mouse.show();			// Unregister for mouse events with the Stage instance			stage.removeEventListener(MouseEvent.MOUSE_MOVE,shadowMouse);			stage.removeEventListener(CursorEvent.MOUSE_HIDE,hideMouse);			stage.removeEventListener(CursorEvent.MOUSE_HIDE,hideMouse);			stage.removeEventListener(Event.MOUSE_LEAVE,mouseLeaveListener);			removeEventListener(Event.ADDED_TO_STAGE,addToStageHandler);			removeEventListener(Event.REMOVED_FROM_STAGE,removedFromStageListener);		}				private function onIOError(event:IOErrorEvent):void {			//		}	}}